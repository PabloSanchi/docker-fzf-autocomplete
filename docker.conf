#!bin/bash
if ! command -v docker >/dev/null 2>&1; then
  return 0 2>/dev/null || exit 0
fi

if ! command -v fzf >/dev/null 2>&1; then
  return 0 2>/dev/null || exit 0
fi

DOCKER_FORMAT_CONTAINER="table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
DOCKER_FORMAT_CONTAINER_SHORT="table {{.ID}}\t{{.Names}}\t{{.Status}}"
DOCKER_FORMAT_IMAGE="table {{.ID}}\t{{.Repository}}\t{{.Tag}}\t{{.Size}}"

_dkr_list_containers() {
	docker $1 --format "$DOCKER_FORMAT_CONTAINER" 2>/dev/null || true
}

_dkr_list_containers_short() {
	docker $1 --format "$DOCKER_FORMAT_CONTAINER_SHORT" 2>/dev/null || true
}
 
_dkr_list_images() {
	docker images $1 --format "$DOCKER_FORMAT_IMAGE" 2>/dev/null || true
}

_dkr_commands() {
	echo "COMMANDS" # fzf forced header

	docker --help \
		| awk '/Management Commands:/,/Options:/' \
    	| awk '{print $1}' \
    	| grep -vE '^(Management|Commands:|Options:)$' \
    	| sed '/^$/d'
}

_dkr_containers_running()	{ _dkr_list_containers 			"ps --filter status=running"; }
_dkr_containers_exited()	{ _dkr_list_containers_short	"ps -a --filter status=exited"; }
_dkr_containers_all()		{ _dkr_list_containers 			"ps -a"; }
_dkr_images_all()			{ _dkr_list_images				""; }


_dkr_source_for() {
	local subcmd="$1"
	case "$subcmd" in
		stop)
			_dkr_containers_running
			;;

		start)
			_dkr_containers_exited
			;;

		rmi)
			_dkr_images_all
			;;

		rm)
			_dkr_containers_exited
			;;

		logs)
			_dkr_containers_all
			;;

		exec)
			_dkr_containers_running
			;;

		cp)
			_dkr_containers_all
			;;

		*)
			_dkr_commands
			;;
	esac
}


_fzf_complete_docker() {
  type _fzf_complete >/dev/null 2>&1 || return 124

  local subcmd="${COMP_WORDS[1]:-}"
  
  _fzf_complete "--header-lines=1" "$opts" "$@" < <(_dkr_source_for "$subcmd") && return
  return 124 # fzf fallback
}

_fzf_complete_docker_post() {
  awk '{print $1}'
}

complete -r docker 2>/dev/null || true
complete -o default -o bashdefault -F _fzf_complete_docker docker